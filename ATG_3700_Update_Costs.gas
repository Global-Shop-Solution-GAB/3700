Program.Sub.ScreenSU.Start
gui.F_Update_Costs..create
gui.F_Update_Costs..caption("Update Standard Costs")
gui.F_Update_Costs..size(5805,2370)
gui.F_Update_Costs..position(0,0)
gui.F_Update_Costs..event(unload,f_update_costs_unload)
gui.F_Update_Costs..alwaysontop(False)
gui.F_Update_Costs..fontname("Arial")
gui.F_Update_Costs..fontsize(8)
gui.F_Update_Costs..forecolor(0)
gui.F_Update_Costs..fontstyle(,,,,)
gui.F_Update_Costs..BackColor(-2147483633)
gui.F_Update_Costs..controlbox(True)
gui.F_Update_Costs..maxbutton(False)
gui.F_Update_Costs..minbutton(True)
gui.F_Update_Costs..mousepointer(0)
gui.F_Update_Costs..moveable(True)
gui.F_Update_Costs..sizeable(False)
gui.F_Update_Costs..ShowInTaskBar(True)
gui.F_Update_Costs..titlebar(True)
gui.F_Update_Costs.lbl1.create(label,"Select spreadsheet",True,1935,255,1,200,200,True,0,Arial,8,-2147483633,0)
gui.F_Update_Costs.txtSpreadsheet.create(textbox,"",True,5015,300,0,200,400,True,0,Arial,8,-2147483643,1)
gui.F_Update_Costs.cmdSpreadsheet.create(button)
gui.F_Update_Costs.cmdSpreadsheet.caption("^")
gui.F_Update_Costs.cmdSpreadsheet.visible(True)
gui.F_Update_Costs.cmdSpreadsheet.size(300,300)
gui.F_Update_Costs.cmdSpreadsheet.zorder(0)
gui.F_Update_Costs.cmdSpreadsheet.position(5200,400)
gui.F_Update_Costs.cmdSpreadsheet.enabled(True)
gui.F_Update_Costs.cmdSpreadsheet.fontname("Arial")
gui.F_Update_Costs.cmdSpreadsheet.fontsize(8)
gui.F_Update_Costs.cmdSpreadsheet.event(click,cmdspreadsheet_click)
gui.F_Update_Costs.lbl2.create(label,"Select location",True,2835,255,1,200,800,True,0,Arial,8,-2147483633,0)
gui.F_Update_Costs.txtLoc.create(textbox,"",True,1215,300,0,200,1000,True,0,Arial,8,-2147483643,1)
gui.F_Update_Costs.txtLoc.event(change,txtloc_change)
gui.F_Update_Costs.txtLoc.maxLength(2)
gui.F_Update_Costs.cmdLoc.create(button)
gui.F_Update_Costs.cmdLoc.caption("^")
gui.F_Update_Costs.cmdLoc.visible(True)
gui.F_Update_Costs.cmdLoc.size(300,300)
gui.F_Update_Costs.cmdLoc.zorder(0)
gui.F_Update_Costs.cmdLoc.position(1400,1000)
gui.F_Update_Costs.cmdLoc.enabled(True)
gui.F_Update_Costs.cmdLoc.fontname("Arial")
gui.F_Update_Costs.cmdLoc.fontsize(8)
gui.F_Update_Costs.cmdLoc.event(click,cmdloc_click)
gui.F_Update_Costs.chkAllLocs.create(checkbox)
gui.F_Update_Costs.chkAllLocs.caption("Update all locations?")
gui.F_Update_Costs.chkAllLocs.visible(True)
gui.F_Update_Costs.chkAllLocs.size(1935,255)
gui.F_Update_Costs.chkAllLocs.zorder(0)
gui.F_Update_Costs.chkAllLocs.position(1800,1000)
gui.F_Update_Costs.chkAllLocs.enabled(True)
gui.F_Update_Costs.chkAllLocs.alignment(0)
gui.F_Update_Costs.chkAllLocs.fontname("Arial")
gui.F_Update_Costs.chkAllLocs.fontsize(8)
gui.F_Update_Costs.chkAllLocs.event(click,chkalllocs_click)
gui.F_Update_Costs.cmdUpdate.create(button)
gui.F_Update_Costs.cmdUpdate.caption("Update")
gui.F_Update_Costs.cmdUpdate.visible(True)
gui.F_Update_Costs.cmdUpdate.size(855,375)
gui.F_Update_Costs.cmdUpdate.zorder(0)
gui.F_Update_Costs.cmdUpdate.position(200,1400)
gui.F_Update_Costs.cmdUpdate.enabled(True)
gui.F_Update_Costs.cmdUpdate.fontname("Arial")
gui.F_Update_Costs.cmdUpdate.fontsize(8)
gui.F_Update_Costs.cmdUpdate.event(click,cmdupdate_click)


Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start

Program.Sub.Preflight.End

Program.Sub.Main.Start
'7/29/10 by SMC for Customer Simpson - Quote 1364
'Custom Hook

F.ODBC.Connection!conx.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)
Gui.F_Update_Costs..Show
Gui.F_Update_Costs.chkAllLocs.Value(1)
F.Intrinsic.Debug.Stop

Program.Sub.Main.End

program.sub.f_update_costs_unload.start
F.ODBC.Connection!conx.Close
F.Intrinsic.Control.End

program.sub.f_update_costs_unload.end

program.sub.chkalllocs_click.start
F.Intrinsic.Control.If(V.Screen.F_Update_Costs!chkAllLocs.Value,=,1)
	Gui.F_Update_Costs.txtLoc.Text("")
F.Intrinsic.Control.EndIf

program.sub.chkalllocs_click.end

program.sub.cmdspreadsheet_click.start
V.Local.sFile.Declare(String)

F.Intrinsic.UI.ShowOpenFileDialog("",".xls","C:\",V.local.sFile)
F.Intrinsic.Control.If(V.Local.sFile,<>,"***CANCEL***")
	Gui.F_Update_Costs.txtSpreadsheet.Text(V.Local.sFile)
F.Intrinsic.Control.EndIf

program.sub.cmdspreadsheet_click.end

program.sub.cmdloc_click.start
V.Local.sCol.Declare(String)
V.Local.sColW.Declare(String)
V.Local.sQuery.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.String.Split("Location*!*Description","*!*",V.Local.sCol)
F.Intrinsic.String.Split("1500*!*3500","*!*",V.Local.sColW)
V.Local.sQuery.Set("SELECT DISTINCT LOCATION, LOCATION_DESC FROM V_LOCATIONS ORDER BY LOCATION ASC")

F.Intrinsic.UI.Browser("Select a location","conx",V.Local.sQuery,V.Local.sCol,V.Local.sColW,5000,5000,V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	Gui.F_Update_Costs.txtLoc.Text(V.Local.sRet(0))
F.Intrinsic.Control.EndIf

program.sub.cmdloc_click.end

program.sub.txtloc_change.start
F.Intrinsic.Control.If(V.Screen.F_Update_Costs!txtLoc.Text,<>,"")
	Gui.F_Update_Costs.chkAllLocs.Value(0)
f.Intrinsic.Control.EndIf

program.sub.txtloc_change.end

program.sub.cmdupdate_click.start
V.Local.bRet.Declare(Boolean)
V.Local.sXLS.Declare(String)
V.Local.sError.Declare(String)

F.Intrinsic.Control.SetErrorHandler("cmdupdate_click_Err")
F.Intrinsic.Control.ClearErrors

F.Intrinsic.Control.If(V.Screen.F_Update_Costs!txtSpreadsheet.Text,=,"")
	F.Intrinsic.UI.Msgbox("Select valid file path of spreadsheet")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
F.Intrinsic.File.Exists(V.Screen.F_Update_Costs!txtSpreadsheet.Text,V.Local.bRet)
F.Intrinsic.Control.If(V.Local.bRet,=,False)
	F.Intrinsic.UI.Msgbox("Select valid file path of spreadsheet")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Screen.F_Update_Costs!txtLoc.Text,=,"")
	F.Intrinsic.Control.If(V.Screen.F_Update_Costs!chkAllLocs.Value,=,0)
		F.Intrinsic.UI.Msgbox("Select location to update")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

Gui.F_Update_Costs..Enabled(False)
Gui.F_Update_Costs.cmdUpdate.Enabled(False)

F.Intrinsic.UI.InvokeWaitDialog("Reading spreadsheet...","Updating Standard Costs")
F.Automation.MSExcel.CheckPresence(V.Local.bRet)
F.Intrinsic.Control.If(V.Local.bRet,=,True)
'	F.Automation.MSExcel.ReadSpreadsheet(V.Screen.F_Update_Costs!txtSpreadsheet.Text,3,101,V.Local.sXLS)
	F.Automation.MSExcel.ReadSpreadsheet(V.Screen.F_Update_Costs!txtSpreadsheet.Text,4,10000,V.Local.sXLS)
F.Intrinsic.Control.Else
	F.Automation.OOGeneral.CheckPresence(V.Local.bRet)
	F.Intrinsic.Control.If(V.Local.bRet,=,True)
'		F.Automation.OOCalc.ReadSpreadsheet(V.Screen.F_Update_Costs!txtSpreadsheet.Text,False,3,101,V.Local.sXLS)
		F.Automation.OOCalc.ReadSpreadsheet(V.Screen.F_Update_Costs!txtSpreadsheet.Text,True,4,10000,V.Local.sXLS)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Microsoft Excel or OOCalc required to execute .xls import")
		F.Intrinsic.UI.CloseWaitDialog
		Gui.F_Update_Costs..Enabled(True)
		Gui.F_Update_Costs.cmdUpdate.Enabled(True)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Intrinsic.Debug.Stop
F.Intrinsic.Control.If(V.Local.sXLS,=,"")
	F.Intrinsic.UI.CloseWaitDialog
	Gui.F_Update_Costs..Enabled(True)
	Gui.F_Update_Costs.cmdUpdate.Enabled(True)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub("UpdateCosts","XLS",V.Local.sXLS)

F.Intrinsic.UI.CloseWaitDialog
Gui.F_Update_Costs..Enabled(True)
Gui.F_Update_Costs.cmdUpdate.Enabled(True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdupdate_click_Err")
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Concat("Error occured ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
'		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

F.Intrinsic.UI.CloseWaitDialog
Gui.F_Update_Costs..Enabled(True)
Gui.F_Update_Costs.cmdUpdate.Enabled(True)

program.sub.cmdupdate_click.end

Program.Sub.UpdateCosts.Start
V.Local.sRet.Declare(String)
V.Local.bRet.Declare(Boolean)
V.Local.sLoc.Declare(String)
V.Local.sQuery.Declare(String)
V.Local.sRows.Declare(String)
V.Local.iR.Declare(String)
V.Local.sCols.Declare(String)
V.Local.iC.Declare(Long)
V.Local.sXLS.Declare(String)
V.Local.iS.Declare(String)
V.Local.iTemp.Declare(Long)
V.Local.sStatus.Declare(String)
V.Local.iRows.Declare(Long)
V.Local.sFile.Declare(String)
V.Local.sMissingParts.Declare(String)
V.Local.sError.Declare(String)
V.Local.iRet.Declare(String)
V.Local.bCostsFile.Declare(Boolean)
V.Local.sParts.Declare(String)
V.Local.sParts.Redim(-1,-1)
V.Local.iUB.declare(Long,-1)

F.Intrinsic.Control.SetErrorHandler("UpdateCosts_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sXLS.Set(V.Args.XLS)
F.Intrinsic.String.Split(V.Local.sXLS,"&^&",V.Local.sXLS)
F.Intrinsic.Control.For(V.Local.iS,0,V.Local.sXLS.UBound,1)
'	F.Intrinsic.Debug.InvokeDebugger
	F.Intrinsic.Debug.Stop
	F.Intrinsic.String.Split(V.Local.sXLS(v.Local.iS),"$!$",V.Local.sRows)
	F.Intrinsic.String.Split(V.Local.sRows(0),"*!*",V.Local.sCols)
	V.Local.bCostsFile.Set(False)
	F.Intrinsic.String.Trim(V.Local.sCols(0),V.Local.sCols(0))
	F.Intrinsic.String.UCase(V.Local.sCols(0),V.Local.sCols(0))
	F.Intrinsic.Control.If(V.Local.sCols(0),=,"PART")
		F.Intrinsic.String.Trim(V.Local.sCols(1),V.Local.sCols(1))
		F.Intrinsic.String.UCase(V.Local.sCols(1),V.Local.sCols(1))
		F.Intrinsic.Control.If(V.Local.sCols(1),=,"MATERIAL COST")
			F.Intrinsic.String.Trim(V.Local.sCols(2),V.Local.sCols(2))
			F.Intrinsic.String.UCase(V.Local.sCols(2),V.Local.sCols(2))
			F.Intrinsic.Control.If(V.Local.sCols(2),=,"LABOR COST")
				F.Intrinsic.String.Trim(V.Local.sCols(3),V.Local.sCols(3))
				F.Intrinsic.String.UCase(V.Local.sCols(3),V.Local.sCols(3))
				F.Intrinsic.Control.If(V.Local.sCols(3),=,"OVERHEAD COST")
					V.Local.bCostsFile.Set(True)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.bCostsFile,=,False)
		F.Intrinsic.UI.Msgbox("Selected .XLS is not a Standard Cost file (Column headers must be 'PART', 'MATERIAL COST', 'LABOR COST', and 'OVERHEAD COST'")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Math.Add(V.Local.sRows.UBound,1,V.Local.iRows)
	F.Intrinsic.Math.Add(V.Local.iS,1,V.Local.iTemp)
	F.Intrinsic.String.Concat("Reading Sheet ",V.Local.iTemp,"...",V.Local.sStatus)
	F.Intrinsic.Control.For(V.Local.iR,1,V.Local.sRows.UBound,1)
		F.Intrinsic.String.Split(V.Local.sRows(v.Local.iR),"*!*",V.Local.sCols)

		F.Intrinsic.Control.If(V.Screen.F_Update_Costs!chkAllLocs.Value,=,0)
			F.Intrinsic.String.Concat("SELECT PART, LOCATION FROM INVENTORY_MSTR WHERE PART='",V.Local.sCols(0),"' AND LOCATION='",V.Screen.F_Update_Costs!txtLoc.Text,"'",V.Local.sQuery)
			F.ODBC.Connection!conx.OpenRecordsetRO("rstParts",V.Local.sQuery)
			F.Intrinsic.Control.If(V.ODBC.conx!rstParts.EOF,=,True)
				F.Intrinsic.Control.If(V.Local.sMissingParts,=,"")
					V.Local.sMissingParts.Set("The following parts could not be found:")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Concat(V.Local.sMissingParts,V.Ambient.NewLine,"PART: ",V.Local.sCols(0),V.Ambient.Tab,"LOC: ",V.Screen.F_Update_Costs!txtLoc.Text,V.Local.sMissingParts)
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.CallSub("UpdateTableForPart","sCol",V.Local.sRows(v.Local.iR),"Loc",V.Screen.F_Update_Costs!txtLoc.Text)
			F.Intrinsic.Control.EndIf
			F.ODBC.conx!rstParts.Close
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Concat("SELECT LOCATION FROM LOCATIONS WHERE LOCATION NOT IN (SELECT DISTINCT LOCATION FROM INVENTORY_MSTR WHERE PART='",V.Local.sCols(0),"') AND SYS = 'CMP' AND SUB_SYS= 'LOC'",V.Local.sQuery)
			F.ODBC.Connection!conx.OpenRecordsetRO("rstParts",V.Local.sQuery)
			F.Intrinsic.Control.DoUntil(V.ODBC.conx!rstParts.EOF,=,True)
				F.Intrinsic.Control.If(V.Local.sMissingParts,=,"")
					V.Local.sMissingParts.Set("The following parts could not be found:")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Concat(V.Local.sMissingParts,V.Ambient.NewLine,"PART: ",V.Local.sCols(0),V.Ambient.Tab,"LOC: ",V.ODBC.conx!rstParts.FieldVal!LOCATION,V.Local.sMissingParts)
				F.ODBC.conx!rstParts.MoveNext
			F.Intrinsic.Control.Loop
			F.ODBC.conx!rstParts.Close

			F.Intrinsic.String.Concat("SELECT LOCATION FROM LOCATIONS WHERE LOCATION IN (SELECT DISTINCT LOCATION FROM INVENTORY_MSTR WHERE PART='",V.Local.sCols(0),"') AND SYS = 'CMP' AND SUB_SYS= 'LOC'",V.Local.sQuery)
			F.ODBC.Connection!conx.OpenRecordsetRO("rstParts",V.Local.sQuery)
			F.Intrinsic.Control.DoUntil(V.ODBC.conx!rstParts.EOF,=,True)
				F.Intrinsic.Control.CallSub("UpdateTableForPart","sCol",V.Local.sRows(v.Local.iR),"Loc",V.odbc.conx!rstParts.FieldVal!LOCATION)
				F.ODBC.conx!rstParts.MoveNext
			F.Intrinsic.Control.Loop
			F.ODBC.conx!rstParts.Close
		F.Intrinsic.Control.EndIf

		F.Intrinsic.Math.Add(V.Local.iR,1,V.Local.iTemp)
		F.Intrinsic.UI.ChangeWaitStatus(V.Local.sStatus,V.Local.iTemp,1,V.Local.iRows)
		F.Intrinsic.Debug.Stop
	F.Intrinsic.Control.Next(V.Local.iR)
F.Intrinsic.Control.Next(V.Local.iS)

'f.Intrinsic.Control.If(V.Caller.GSSVersion.float,>=,2010.01)
'	F.Global.General.CallWrapperSync(50,"FIXICOST")
'F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("Please run 1SHOT 'FIXICOST' from System Support > Transactions > Run 1SHOT to update Total Cost")
'F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sMissingParts,<>,"")
	F.Intrinsic.String.Concat(V.Caller.TempDir,"\Update_Std_Costs_Missing_Parts.txt",V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sMissingParts)
	F.Intrinsic.File.GetHandle(V.Local.iRet)
	F.Intrinsic.Task.ShellExec(V.Caller.Handle,"OPEN",V.Local.sFile,"","",5)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("UpdateCosts_Err")
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Concat("Error occured ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
'		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

Program.Sub.UpdateCosts.End

Program.Sub.UpdateTableForPart.Start
V.Local.sCols.Declare(String)
V.Local.sQuery.Declare(String)

F.Intrinsic.String.Split(V.Args.sCol,"*!*",V.Local.sCols)

F.Intrinsic.String.Concat("SELECT * FROM FG_STD_COST WHERE PART='",V.Local.sCols(0),"' AND LOCATION='",V.args.Loc,"'",V.Local.sQuery)
F.ODBC.Connection!conx.OpenRecordsetRW("rstCosts",V.Local.sQuery)
F.Intrinsic.Control.If(V.ODBC.conx!rstCosts.EOF,=,True)
	F.ODBC.conx!rstCosts.AddNew
	F.ODBC.conx!rstCosts.Set!PART(V.Local.sCols(0))
	F.ODBC.conx!rstCosts.Set!LOCATION(V.args.Loc)
	F.ODBC.conx!rstCosts.Set!OUTSIDE(0)
	F.ODBC.conx!rstCosts.Set!AVERAGE_COST(0)
	F.ODBC.conx!rstCosts.Set!STANDARD_COST(0)
	F.ODBC.conx!rstCosts.Set!PURCHASE_COST(0)
	F.ODBC.conx!rstCosts.Set!LATEST_COST(0)
	F.ODBC.conx!rstCosts.Set!HOURS(0)
	F.ODBC.conx!rstCosts.Set!FILLER("")
F.Intrinsic.Control.EndIf

F.ODBC.conx!rstCosts.Set!MATERIAL(V.Local.sCols(1))
F.ODBC.conx!rstCosts.Set!LABOR(V.Local.sCols(2))
F.ODBC.conx!rstCosts.Set!OVERHEAD(V.Local.sCols(3))

F.ODBC.conx!rstCosts.Update
F.ODBC.conx!rstCosts.close

Program.Sub.UpdateTableForPart.End


